[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "linregress",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ticker",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "lazypredict",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lazypredict",
        "description": "lazypredict",
        "detail": "lazypredict",
        "documentation": {}
    },
    {
        "label": "LazyClassifier",
        "importPath": "lazypredict.Supervised",
        "description": "lazypredict.Supervised",
        "isExtraImport": true,
        "detail": "lazypredict.Supervised",
        "documentation": {}
    },
    {
        "label": "CLASSIFIERS",
        "importPath": "lazypredict.Supervised",
        "description": "lazypredict.Supervised",
        "isExtraImport": true,
        "detail": "lazypredict.Supervised",
        "documentation": {}
    },
    {
        "label": "LazyClassifier",
        "importPath": "lazypredict.Supervised",
        "description": "lazypredict.Supervised",
        "isExtraImport": true,
        "detail": "lazypredict.Supervised",
        "documentation": {}
    },
    {
        "label": "CLASSIFIERS",
        "importPath": "lazypredict.Supervised",
        "description": "lazypredict.Supervised",
        "isExtraImport": true,
        "detail": "lazypredict.Supervised",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "PolClassifier",
        "importPath": "poleClassifier",
        "description": "poleClassifier",
        "isExtraImport": true,
        "detail": "poleClassifier",
        "documentation": {}
    },
    {
        "label": "Architecture",
        "importPath": "architecture",
        "description": "architecture",
        "isExtraImport": true,
        "detail": "architecture",
        "documentation": {}
    },
    {
        "label": "Architecture",
        "kind": 6,
        "importPath": "architecture",
        "description": "architecture",
        "peekOfCode": "class Architecture:\n    def __init__(self, X_train, X_test, y_train, y_test):\n        print('Architecture Classifier')\n        # train data\n        self.X_train = np.array(X_train)\n        # self.X_train = X_train\n        self.y_train = np.array(y_train)\n        # test data\n        self.X_test = np.array(X_test)\n        # self.X_test = X_test",
        "detail": "architecture",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "kind": 6,
        "importPath": "compute_files",
        "description": "compute_files",
        "peekOfCode": "class ComputeFile: \n    def __init__(self, input_path='', output_path=''):\n        self.input_path = input_path\n        self.output_path = output_path\n        self.input_files = []\n        self.output_files = []\n        self.extensions = ['.csv']\n    def accept_extension(self, file='') :\n        for ext in self.extensions :\n            if file.endswith(ext) :",
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "histogram",
        "description": "histogram",
        "peekOfCode": "class Main:\n    def __init__(self, input_path='', output_path='', suffix=''):\n        self.input_path = input_path\n        self.output_path = output_path\n        self.suffix = suffix\n        self.dimensions = [i*10 for i in range(1, 6)]\n        self.classifiers = [\"AdaBoostClassifier\", \"RandomForestClassifier\",    \"XGBClassifier\",    \"ExtraTreeClassifier\",\n                            \"LogisticRegression\", \"SVC\", \"KNeighborsClassifier\", \"DecisionTreeClassifier\",  \"GaussianNB\"]  # ,    \"GradientBoostinglassifier\"]\n        self.class_by_dim = {}\n        self.short_classifier = {",
        "detail": "histogram",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Main:\n    def __init__(self, input_path='', output_path='', suffix=''):\n        self.input_path = input_path + suffix + '/feature_vector/'\n        self.output_path = output_path + suffix + '/'\n        self.suffix = suffix\n        files = ComputeFile(input_path=self.input_path).build_list_files()\n        test_file = self.filter(keyword='test', all=files)\n        self.test_data = self.read_csv(test_file)\n        print(test_file)\n        train_file = self.filter(keyword='train', all=files)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "sota",
        "description": "sota",
        "peekOfCode": "class Main:\n    def __init__(self, input_path='', output_path='', suffix=''):\n        self.input_path = input_path + suffix + '/feature_vector/'\n        self.output_path = output_path + suffix + '/'\n        self.suffix = suffix\n        files = ComputeFile(input_path=self.input_path).build_list_files()\n        test_file = self.filter(keyword='test', all=files)\n        self.test_data = self.read_csv(test_file)\n        train_file = self.filter(keyword='train', all=files)\n        self.train_data = self.read_csv(train_file)",
        "detail": "sota",
        "documentation": {}
    }
]